import java.awt.*;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;


public class Main {


    static Coord getLargestY(HashMap<Integer, List<Coord>> map){
        Coord currentMax = map.get(1).get(0);
        for (List<Coord> l : map.values()){
            for (Coord c : l){
                if (c.y > currentMax.y) currentMax = c;
            }
        }
        return currentMax;
    }


    static boolean canMoveDown(int rockNum, List<Coord> l, HashMap<Integer, List<Coord>> map){
        for (Coord c : l){
            if (c.y-1 == -1) return false;
            for (Integer i : map.keySet()){
                if (i == rockNum) continue; //Don't compare rock with itself
                for (Coord coord : map.get(i)){
                    if (c.y-1 == coord.y && c.x == coord.x){
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean canMoveLeft(int rockNum, List<Coord> l, HashMap<Integer, List<Coord>> map){
        for (Coord c : l){
            if (c.x-1 == -1) return false;
            for (Integer i : map.keySet()){
                if (i == rockNum) continue; //Don't compare rock with itself
                for (Coord coord : map.get(i)){
                    if (c.x-1 == coord.x && c.y == coord.y){
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean canMoveRight(int rockNum, List<Coord> l, HashMap<Integer, List<Coord>> map){
        for (Coord c : l){
            if (c.x+1 == 7) return false;
            for (Integer i : map.keySet()){
                if (i == rockNum) continue; //Don't compare rock with itself
                for (Coord coord : map.get(i)){
                    if (c.x+1 == coord.x && c.y == coord.y){
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int rockNum = 1;
        int jetIndex = 0;
        HashMap<Integer, List<Coord>> map = new HashMap<>();
        String input = ">>><<<>>>><<<>><<<<><>>><>>>><<><<<>>><<<><<<>>>><<<<>>><<>>>><<<>>>><<<<><>>>><<<>><<<>>><<><<<><>>>><>>>><<><<<<>>><<>>>><<<<>><<<<><<<>>><<<>><<<>><>>><<<<>>><<>>><<><<<<>>>><<<<><<<<>>><<>><<><<><<>>><<<><<<<>>>><<<><<<><><<><>>><<<<>><<<<>>>><><<<<>><>>>><<<<>>><<<>>>><<<<>>>><<<><>>>><>>>><<>>><<>>>><>>>><<><<<<>>><>>>><>>>><<<<>><<<>><<><<><<<><<><>><<<><<><<>>>><<>>><<>>>><>>><<<<>>>><<>><<<<><<>><><<<>><<<>>><<>>><<<><<<<><<>>><<<><<<<>>><<><<<<><<<<>><<<>><><>>>><><<<>>><<<>><<<<>>>><><<<<><<<>><<><<<>>>><<><<<>>>><<>>>><><>>><<>>><<<>>>><<<><<<><<<<>>><<<>>>><<<><>>>><<>>>><<<>>><<<<>><<<<>>>><><<<>>><<<<>>>><><>>>><>><>><<<>>><<<<><<<<><<<<>>>><<<>>>><>>>><<<<>>>><<>>><<><<<><<<><<<>>><<<>><<<><<<>>>><<<>><<>><<><<>><<<<>><<<<>><>><<>><<<<>>>><><<<<>><>><><<<>>><<<<>><>>>><<>>>><>><>>><<>><<><<<<>>><<<>>><>>><<><>>><<<<><><<<>>>><<<<><<<>>><><<<<><><<>>><<<><><><<>>><><><<>>>><<<>>>><<<>>><<>>>><>>><<<<>>>><>>>><<><<<>>><<<>>>><<>><<<<>>>><<<<>>><<<<><<<>><<>><<>>>><><<<>>>><<<>>>><<<<>><<<<>>>><>>>><<<>>>><><<>><>><<<><><<<<>>>><>>>><<<<>>><<<><<<><<<<>>>><<><<<>>>><<>>><<>><><<>><<<<>>><<>><<<><<<>><<<<><<><<<>>><><>><<<>><<<<>>>><<<>>><<>>><>><>><<<>><<<><<<><<><<>>>><<<<>>>><<<<>><<>><<>><<<>><<><<<><>>><<><>>><<>>>><>>>><><<><>><>><>>>><<<<>>><><<<<>>>><>>>><>>><<<>>>><<><<<<>><<<>>><<>>><<>><<<<>>>><<<>>>><<<>>><<<>>><><<<>><<>>><<<<>>>><>>>><<<>>>><<<>><>><<<>>>><<<>>>><<>>>><<<<>><><>>><<>><<<<><<<<>><<<<>><<<>>>><<<><<>><<>><<<<>><<>>><<<<>>><<<>>><<<<><<<<><<><<<>>>><>>><>>><<>><>>><<<<>>>><<<><>><<><<<<><>><<<><<>>>><<<><<<<>>>><<>>><><>>><<<>>>><><<>><<<>>>><>>>><<>><<<>>><<<<>>><<><>>><>><<<<>><<>>>><<<<>>>><<<>><>><<<>>><<<>>>><<<<><<><>><<<>><<><<<<>>>><<<>>><<><<<<><>><<<><<<><<<<>>><>><<<<><<<>><<<<>><>><<<<><<>><><<<>>><<<<>>><><<<<><>><><<>>>><>>>><<<<>>><<>>><<>>>><<<><<>>><<><<<<>>><<<>>><>><<<<>>><<>><<<>>><<>>>><<>><<<<>>>><<>><<>>>><<>>>><<><<>><<<<>>>><<<<>>><<<<><>>>><<<>>><>>><<<<>>>><<>>><<<><<<><<<<>><>>><<<>>>><<>>><<<>>><<<<>><<<>><<><<<<>>>><>>>><<><>>><<<<><<><<<<><><<<<>>><<><<><<<>>>><<><<>>>><>>><>><<<<><<<>>>><<<<>><<>>><<<>>>><<>>>><<><<>>>><>><><<<<>>>><<><<>>><<><<<><<><>><<<<>>>><<<>>><<<>>>><<><>>>><<><<><<<<><<<<>>><<<><>>>><<<>><<>><<><>>>><<>><>>><<<<>>><<>>>><<<<>>><>>><<<>>>><<<>>>><<<<>>><<>>><>><<<<>><<<><<<>>>><<<><<<<>>><<>><>><<<>><<<>><>>>><<>><><>>><<><>><<<>>><<>>>><>>><<><<>>><<<<>><<<<>>><>>>><<<<>>><<<>><<<<>>><<<><<<>>>><>>>><>><<<<>><><<<><>>>><>>>><<>>><<>>><<>>><<<><<>><<<>>>><>><>><<<<>>>><<>>><<>>>><>>><>><<>>><<<<>>>><<<>><<<><<<><<>>><<>><>>><<>>><<<<>><<<<><<>><<<<>>><<>>><><<>>><<<<>>><<<<>><<<<>><<<>>>><<<>>>><<<<>>><<<><<><<>>><<<>>>><<>>>><<<<>>><<<<>><<><<<<>>><><<<>><>>><<>>><<><<><<><<<<>>><<<><<<<><<<<><<<<>><>><<<<>>>><>>><<<<>><<><<>><<<>><<>>>><<<<>>>><<>><>><<><>>><<>><<<>><<>>><<<>>><<><<<<><><<>><<>>><<<>>>><<<<>>><<><<<>>>><<<<><<<<><>>>><<<>>>><<<>>><>>>><<<<>>>><<<<>><<>>><<>>>><<><<>>><<>>>><<<<><>>><<>>><>>>><<<>>><<<<>><<<<>><<<>><><<>>><<<>>><<<<>>>><<>>><<<<><<<<>>>><<<>>><<<><<>>><>><>>><<<<>>>><>><<<<>><>><<<<>>>><<<>><<>><<<>><<<><<<<>>>><<<<>><>>>><>><<<>>>><>>><>><<<><<<>><<<<>>><<<<>>><<>><<<><<<>>><<<>><<>>><<<<>>><<><<<>>><<><<><<<<>><>><<><<<<>><>>>><<><<<>>><<<>><><<<<>><<<>>>><<<>><<<>>><>><>>><<<>>>><>>><<<><<<>>>><<<>><<>>><>>>><<<<>>><<><<<<><<<>>><<<<>>>><<<<><>><<<><<<<>>><<>>>><<><<><>>>><>>>><<<<>>>><<<<>>><>>>><>><<<>>>><<<>>>><<>>>><<><<<<>>>><<<<><>><<<<><>>><<<>><>><>>>><><<<<><<<>>><<<<>><<<><<<<>>>><<<><<<>>>><><<<>>>><<<>><<<>><<<<>>><<<>>>><<<>>><>><<><<<>>><<>>><<><>><<<>>>><<>>>><<<>>>><<<<>>>><<<>>>><<>><>>>><<<><<>><<<><<<>><><>>><<>><<<><>>><<<>><<<>>>><<><>>><>>>><<<<>>>><<<<>>>><>>><<<<>><<<<><<<>>><>>><>>><<<><><<<>><<<>>><<<>>><<<>>>><<<<>>>><<<<><>>>><<<>><>><<<<>><<><<<<><<<>><><<<<>><>>>><<<<>><<<<><<<>>><<><<<<>>>><>>><<><>><>>>><<>><<<<>><>>>><<>><<>><<<<>><<>>>><<<<>>><><<<>><<<<>>>><<<<>>><<<<><<>><<>><<>>><<><<<<>><<<<>>><<>><<<<>><<<>>><<<>>>><<>>><<>>>><<<>><<<>>><>><<<<>><<<<>>><<>>><>>>><<><<>>>><<<<>>>><<><><<<<>>>><<<<>>>><<<>>>><><>><<>>><<<><<<<>>><><<<<>>><>>><><<>><<<<>>>><<>>><>>><>>><<><<><<>>>><<><<<<>>>><<<>><>>>><<<><><>>><<><<<>>>><<<<>>>><<<<>>><<<<><>><<<<>><<<>>>><<<<><<>>><><>>>><<>>>><<<>>><<<>>>><<<<><<>><<><<<<>>>><<<<>><<<><<>><<<>><<<>>>><<<>>><<<<><<<>>>><<<>>>><<<>>>><><<><<>><<<<><<<>>>><>>><><<<<><<>>>><<<<><<<>><<><<<><<<<>>>><<><<>>><>><<<<><><<<<>>><<<<>><>>><>>>><<><<<<><<<>><<<<>>>><>>>><<<><>>><<<<><<>>><>>>><<>><<>>>><<<<>>>><<<<>><<>><<<>>><<<<>>>><>>>><<><<><<<><<>>>><<><<<<>><<<<>><<<<><<<<><<<<><><<<<>>><<<<>><<><<>>><<<<>><<<<>>>><>><<<>>>><<<<>>>><<>>><<>>><<>>><<<<>>><<<>><>><<<>>><<>><<<<>><<><<<>>>><>>>><>>>><<<><<<>><<<<>>><>>><<>><<<<>>>><>>>><<>>>><>>><<<<>>><>>>><<<>><>>>><<<>>>><>>>><<<>>>><<<>><>>>><<<<>>><><<<><<<>>>><<<<>>><<<>>>><<>>><>>>><<<><<<>><<>>><<<<>>>><<<<>><><<<><<<>><<><>><<<<>><<<>>><<<<>>><<<<><<<><>>>><<>>>><<<<>>><<>>><<<<><>>><<>>>><<>>><<>>>><>>>><<<>>><<<>>>><<<>>><<>>><<>>>><<>>><<<>>>><>>><<<<>>>><>><>><<>>><<>>>><<<>>>><<<>>><<<<>>>><<>>><<<>><><<>><<<<>>><<<<>>><<<<><<>>><<<<>>>><<>>><<<<>>>><<>>>><<>>><<<><<<<><<>>>><<<>><>>>><<<>>><>>><<<<>>>><>>>><<>>><<<<>>>><<<<><<<<>><<><>><<<<><>>>><>>><>><<<>>><<>>>><>>>><<><>><<<<>>>><<<><<<<>>><>>><<<>>><<<<><<>><><><>><>><<<<>><<<>>><>>><<<>><<>>>><<<>>><><<<>><<<><<<<>><>><>><>><>>>><>><><<<<>>><<<<>>>><<<<><<>><>><<>>>><>>>><<<<>>><<<>><>>>><<<>><<<>>>><<>>>><>>>><<>><>>><<<<><<<<>>><<<<>><>><>><<<<>>><>>><<<<><<<>>>><<<>>>><<<<>>>><>><<<>><<<><<<><><>><<<>><>>><<>>>><<<><<>><<<<><<<<><<<>><<<>><<<<><<<><<<<><<<>><<><<<>>><<<<>><><<<<>><<<>>><<<>>>><<>>><<>>>><<>>>><<<<>><<<<>>><>>><>><<><<<<><><<><<<>>>><>>>><<<<>>><<>>><<<>>>><<<<>>><<>>><<<>>><>>>><<<<>><<>>>><<<<>>><<>>><<<<>><><<>><<>>>><<>>><<>>>><<<<>>><<<<>>><><<<><<<<><>>><<<<>><>><<<<>>><<<>><>>>><<<<>>><<>>>><<<<><<><<<<>>><<<<>>>><<>><<<<>>><<><<<>><<<>>><>><<<<>><<<><>><<>><<>><<<<>>>><>>><<>>><<><<<>>>><<<<><>>><<<>>><<<<><<<>><<>>>><<<>>>><<><<>><<>><<<><<<<>>>><<><<<<>><><>>><><<<>>>><<<<><<>><>>><<>><>>><<<><<>>><<<<>><>><<<<>><<<<>>>><<<<><<<<><<<>><>>><<<>>><<<<>>>><<>><<>><<<>>><><<<<><<<<>>>><<<>>><<>>><<>><<<<>>>><<>>><<<><>>><>>><<>>><<>>>><<<<><<<<><<<><<<>><<<<>>><>>><>><><<<<>><<><<>>><>>><<<<>><<><<<<>><<<>>><><<>>><<><<<<>><<<<><<<><>>><<<>>>><<>><<<<>>>><<<>><<<>><<<<>>>><<<>><<<<>><<<>>>><<>><>>><<><<<<>><<>>>><<<>>>><<<>>>><>>><<<<><<<><>><<><<<>>>><>><<<<>>><<<<>>><<<>><<<>>><>>>><<<<>>><<<<>>>><<<<>><<>>><<<><<<<>>><>>><<>>><<<>>>><<<<>><>>>><<<<>>><><<<<><<<>><<<><<<<><<<>><<<<><<>><<<<>><><<<>>><>><<<>><<<><>>><<<<>>><<>>>><<>><<>>>><><>>>><>><<<<><<<<><<<<><><<<<>>>><<>>>><<>>><<>><<<>><<><>>>><<<<><<<><<>>>><<<>>>><<<><<<<>>><<>>><<<<>>><<>>><<<><<><>>>><<>>>><<<<>>>><<<>>>><<<<>>><><>><<>>><<<<>>><<<<>>><<<><<<>>><<<>>>><>><<><<>><>><>><><<<>>><<<<>>>><<<>>>><<<<>>><>><<<><<<<>>><<<<><<<<>>>><<<>>><<>>>><<<>>>><>><<<<><<<<><<<>>><>>>><>>>><<>>>><<<><<<><<<>>><<<<>>><<>>><>>>><<<<>>><<><<>><<<><<<><<<><<<<>>><<<>><<<<>>>><<<<><<<>>><<<><><><<<>>>><<<<>>>><<<<>><<>><<<<><>>><<<>><<>>>><<<>>>><>><<<<><><<>>>><<<>><<<<>><<>>><<<<>><><<<>><<>>>><<>>><<>>>><<<<><<<><<>>>><>>>><<<>>><<<<><<>>>><>>>><>>>><<<<><<>>><<<<><<>>>><<<>><<>><<<<>><<<><<<>><<><<>>><<>><<<<><<<>><>>>><<<<><<<>>>><<<>>>><<<>>>><<<<>>><<<>>><><<<<>>>><<>><<<<>>><<<>>><><>>>><<<>>><<><<><<>>>><<>><<<<>>><<<>>>><<<<>>>><>>><<<<>>>><<<<><<><<>>><<<><>><<><<<><>><<<<><<<>>>><<<<>>>><>>><<<>>><<<<>>><>>><<<<>>>><<<<>>><<<<><>><><<>><<<>>>><<<>><<>><<>>>><<<<>>><<<<>><<<<><<><<>>>><<>>>><<<<>>><<<<>><><<<<>>><<>>><<<<><<<<><<>>>><<>><<><>>>><<<<>>><<<>>><>>>><<<><<<>><<<<>>><<>>><<<<>>><>><<<><<><><<<>><<<><<>>>><<<<><<<><<<<>><<<<>><<>>>><<<<>><<>>>><<>><<<>><<>>>><<<<>>><<<<><>><<<>>>><><>>>><<<><<<>><>>><<>><<<>>><<<<><<<>>><<><><<><>>><<>><<<><>>>><>><<<<>><<<<><<<<>>>><<<>>><<>>>><<>>>><<<><<><<<>>>><>><>><<<>><<<><<>><<<>>>><<>>>><<<<>>>><<<<>>><<<<>>><<<>>><<<<><<<>>>><<>>>><>>><><<<>><<><<<><>>><><>>><<<<>>><<<<><<><<<>><<<<><<<<>>>><<<<>><>>>><<>>><<<<>>>><<>>>><><<>>><<><<>><>>>><><<<>>>><<>>><>>>><>><<<<>>>><<<>>>><>>><<>>>><>>>><<>>><<>>><><<<>>><<<><<<>>><<<<>>><<<><<>>>><>>>><><>>><>><><<>>>><<><>><<>><>>><<><<<>>><>><<<><<<<>><><<>><>><<>>>><<<<><<>>>><<<<><>>><<><>>>><<<><<>><<<<>>><<><<>>><<<>>><<<>>><<<<><<<>>>><<<>><>>>><<><<><<<<>>>><<<<>><<<>>>><<<>>>><<<<>>>><<>><><<<<><<<<><<<<>>>><<>><>><<<<><<<>><<>><<<>>>><>>>><<><<<><>>><<<<><>>><>>>><<<<>>>><<<<>><>><<<<>>><>><<<<>>><<<<>>><>>>><>>><<<>><<<>>><<<>>><>>><<<<>><<><<<>><<<<>>>><<><><<<<>>>><<<<>><<<>><<>>>><<<<><>>><>>>><<<><<<<>><<<>><><<<<>><<<<>>><<<>>>><>>>><>><<>><<>>>><<<<>>>><>>>><<<<>><<<>><<<<><<<<><>>>><<<>>>><<<<>><<>><<<<><>><>>>><><<<<>>>><<<<><<<>>>><<<>>>><<>>>><<<><<><>>><<<<>>><<>><<<<>>><<>>><<<>>>><>>>><<<<>>>><<<><<<<>>><<<<>>><>><><<<<>><<<>><<<>>><<<<><<<>>>><<<>>>><<>>>><<>>>><<<<>>>><>><<>>><<>><<<<><<><><<<<>>><<>>><<<<>>><<>><><<<<>>><<>><<<>>>><<<>>>><<><<<<>><<<>><<<>><><<<<><<><<<>>>><>>>><<<><<>><<<<>><<<<>>><><<<>>>><<>>><<<<>>>><<<>>><<<<>>><<<<>><<<>>><><>><<>><>>>><>>><<<>><>>><>><<>><><>><<>><>><<>><><<>>><<<<>>><<<>>><<>>>><>>><>>><>>><<><<><<<>><>><<>><>>>><>>>><<<><<>>><<>><<<><<>>><<<<>>>><<<>><<<<><<<<><<<<><<<>>>><<<>>>><<<>>><<<>>><<<<>>><>>>><<<<>>>><<<>>>><>>>><>>><<<>>>><<>>><<<>><<<<><<<<>>>><<<<>>><>><<<>><>>>><>>><<>><<<<>>><<<<>>>><><>>><>><>>>><>><>>><<<>>>><><<<>>><<>>>><<<<>>>><<<<>>>><<<<>>><<<<>>><<<<>><<<<>><>>><<>>><<<>>>><<<>>>><>>>><<>>><<<<>>>><><<<><<>>><<<><<>>>><>><<>><<<<>><<><><><><<<>>><<>><<<<>>>><>>>><<<><<<><>>><>>><<>><<<<>><<<>>>><<<><<<<>><<<<>>>><<>><>><><<>>>><<>><<<>>>><>>><<>>>><<<<><>><>>>><<<><<<>>>><>><><>><<<>>><<<<>>>><<>><<<<>>><<<>>><<<>>><<>>>><<<<>>><<<<>>><>><<<<>><>><>>>><<>>><<<<><<<<><<<<><>><<<<>>>><<<>>><<>>>><<<<>><<<<><<<>><>>><<<><<<<>><>><<<<>>><<<<>>><><<<>>><<<<>><<<<><<>>><<>>><<<>>><<<<>>><>><<><<>><<<<>>>><>><<>>>><<<><><<>><><<<<>>><<<>>>><<<<><<<<>>>><>>><>>><>><<<><<<<>>>><<<>>><<<<><<<>>>><<<<>>><<>>><<><<>><<<<>>>><<>>>><<<<>>><<<>>>><<><<<<>><>><<<><<>>>><<<<>>><<>><<<>>><<<<>><<<>><<<<>>><<>>><<<<>><>><<>>>><<<>";
        List<Coord> currentCoords = new ArrayList<>();
        for (int i = 2; i < 6; i++) {  //Add initial 4 long rock
            currentCoords.add(new Coord(i, 3));
        }
        map.put(rockNum, new ArrayList<>(currentCoords));

        jetIndex = move(map, input, currentCoords, rockNum, jetIndex);
        Rock currentRock = Rock.PLUS;
//        for (Coord c : currentCoords){
//            System.out.println("" + c.x + " " + c.y);
//        }
//        System.out.println("");
        currentCoords.clear();
        BigInteger count = new BigInteger("0");
        BigInteger max = new BigInteger("999999999999");
        rockNum++;
        while (count.compareTo(max) < 0){
            //Place rock:
            int y  = getLargestY(map).y;
//            System.out.println("LARGEST Y:" + y);
            switch (currentRock){
                case DASH -> {
                    for (int i = 2; i < 6; i++){
                        currentCoords.add(new Coord(i, y+4));
                    }
                    map.put(rockNum, new ArrayList<>(currentCoords));
                }

                case PLUS -> {
                    currentCoords.add(new Coord(3, y+4));

                    currentCoords.add(new Coord(3, y+6));

                    for (int i = 2; i < 5; i++){
                        currentCoords.add(new Coord(i, y+5));
                    }
                    map.put(rockNum, new ArrayList<>(currentCoords));
                }
                case L -> {
                    for (int i = 2; i < 5; i++){
                        currentCoords.add(new Coord(i, y+4));
                    }
                    currentCoords.add(new Coord(4, y+5));
                    currentCoords.add(new Coord(4, y+6));
                    map.put(rockNum, new ArrayList<>(currentCoords));

                }
                case VERT -> {
                    for (int i = 4; i < 8; i++){
                        currentCoords.add(new Coord(2, y+i));
                    }
                    map.put(rockNum, new ArrayList<>(currentCoords));
                }
                case SQUARE -> {
                    for (int i = 2; i < 4; i++){
                        currentCoords.add(new Coord(i, y+4));
                        currentCoords.add(new Coord(i, y+5));
                    }
                    map.put(rockNum, new ArrayList<>(currentCoords));
                }
            }

            jetIndex = move(map, input, currentCoords, rockNum, jetIndex);
//            for (Coord c : currentCoords){
//                System.out.println("" + c.x + " " + c.y);
//            }
//            System.out.println("");
            currentCoords.clear();
            currentRock = currentRock.getNextRock(currentRock);
            count = count.add(BigInteger.valueOf(1));
            rockNum++;
        }
        System.out.println("Tower height: " + (getLargestY(map).y+1));
    }

    private static int move(HashMap<Integer, List<Coord>> map, String input, List<Coord> currentCoords, int rockNum, int jetIndex) {
        int test = 0;
        while(true){
            if (jetIndex > input.length()-1){
                jetIndex = 0;
            }
            char jet = input.charAt(jetIndex);
            jetIndex++;
            if (jet == '<'){ //Try to move rock to the left
                if (canMoveLeft(rockNum, currentCoords, map)){
                    //System.out.println("Moving rock:" + rockNum + " to the left 1.");
                    List<Coord> coords = map.get(rockNum);
                    for (Coord c : coords){
                        c.x = c.x-1;
                    }
                }
            }else{ //Try to move rock to the right
                if (canMoveRight(rockNum, currentCoords, map)){
                    //System.out.println("Moving rock:" + rockNum + " to the right 1.");
                    List<Coord> coords = map.get(rockNum);
                    for (Coord c : coords){
                        c.x = c.x+1;
                    }
                }
            }
            if (!canMoveDown(rockNum, currentCoords, map)) return jetIndex;

            //Move coords down
            List<Coord> coords = map.get(rockNum);
            for (Coord c : coords){
                c.y = c.y-1;
            }

        }

    }
}


class Coord{

    int x,y;
    public Coord(int x, int y){
        this.x = x;
        this.y = y;
    }


}

enum Rock{
    DASH, PLUS, L, VERT, SQUARE;

    public Rock getNextRock(Rock r)
    {
        int index = r.ordinal();
        int nextIndex = index + 1;
        Rock[] rocks = Rock.values();
        nextIndex %= rocks.length;
        return rocks[nextIndex];
    }
}